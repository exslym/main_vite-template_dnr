@use 'sass:math';

//! SET THE PROJECT WIDTH:
//* for MicroSites: $projectWidth: 1920
//* for Publications: $projectWidth: 670
//? ================================ ?//
$projectWidth: 1920;
//? ================================ ?//

/* example: @include adapt(max-width, 600, 1000, 1920); */
@mixin adapt($property, $minValue, $maxValue, $breakPoint: $projectWidth) {
  $min: $minValue + px;
  $max: $maxValue + px;
  @if ($breakPoint) {
    $coeff: math.div($breakPoint, 100);
    $vw: calc(round(math.div($maxValue, $coeff) * 1000) / 1000) + vw;

    // check negative/positive value
    @each $name, $char in str($minValue) and str($maxValue) {
      @if (str-index($name, '-')) {
        // for negative clamp()
        #{$property}: clamp(#{$max}, #{$vw}, #{$min});
      } @else {
        // for positive clamp()
        #{$property}: clamp(#{$min}, #{$vw}, #{$max});
      }
    }
  } @else {
    $coeff: math.div($projectWidth, 100);
    $vw: calc(round(math.div($maxValue, $coeff) * 1000) / 1000) + vw;

    // check negative/positive value
    @each $name, $char in str($minValue) and str($maxValue) {
      @if (str-index($name, '-')) {
        // for negative clamp()
        #{$property}: clamp(#{$max}, #{$vw}, #{$min});
      } @else {
        // for positive clamp()
        #{$property}: clamp(#{$min}, #{$vw}, #{$max});
      }
    }
  }
}

/* example: @include adaptMult(padding, 40 80, 20 30, 1024); */
@mixin adaptMult($property, $firstValues, $secondValues, $breakPoint: $projectWidth) {
  $min1: null;
  $max1: null;
  $min2: null;
  $max2: null;
  $maxValue1: null;
  $maxValue2: null;

  @if (index(auto, $firstValues)) {
    $min1: 'auto';
    $max1: 'auto';
  } @else {
    $min1: nth($firstValues, 1) + px;
    $max1: nth($firstValues, 2) + px;
    $maxValue1: nth($firstValues, 2);
  }
  @if (index(auto, $secondValues)) {
    $min2: 'auto';
    $max2: 'auto';
  } @else {
    $min2: nth($secondValues, 1) + px;
    $max2: nth($secondValues, 2) + px;
    $maxValue2: nth($secondValues, 2);
  }

  @if ($min1 == 'auto' and $max1 == 'auto' and $min2 != 'auto' and $max2 != 'auto') {
    @if ($breakPoint) {
      $coeff: math.div($breakPoint, 100);
      $vw1: '';
      $vw2: calc(round(math.div($maxValue2, $coeff) * 1000) / 1000) + vw;

      // check negative/positive value
      @each $name, $char in str($secondValues) {
        @if (str-index($name, '-')) {
          // for negative clamp()
          #{$property}-top: auto;
          #{$property}-bottom: auto;
          #{$property}-left: clamp(#{$max2}, #{$vw2}, #{$min2});
          #{$property}-right: clamp(#{$max2}, #{$vw2}, #{$min2});
        } @else {
          // for positive clamp()
          #{$property}-top: auto;
          #{$property}-bottom: auto;
          #{$property}-left: clamp(#{$min2}, #{$vw2}, #{$max2});
          #{$property}-right: clamp(#{$min2}, #{$vw2}, #{$max2});
        }
      }
    } @else {
      $coeff: math.div($projectWidth, 100);
      $vw1: '';
      $vw2: calc(round(math.div($max2, $coeff) * 1000) / 1000) + vw;

      // check negative/positive value
      @each $name, $char in str($secondValues) {
        @if (str-index($name, '-')) {
          // for negative clamp()
          #{$property}-top: auto;
          #{$property}-bottom: auto;
          #{$property}-left: clamp(#{$max2}, #{$vw2}, #{$min2});
          #{$property}-right: clamp(#{$max2}, #{$vw2}, #{$min2});
        } @else {
          // for positive clamp()
          #{$property}-top: auto;
          #{$property}-bottom: auto;
          #{$property}-left: clamp(#{$min2}, #{$vw2}, #{$max2});
          #{$property}-right: clamp(#{$min2}, #{$vw2}, #{$max2});
        }
      }
    }
  } @else if ($min1 != 'auto' and $max1 != 'auto' and $min2 == 'auto' and $max2 == 'auto') {
    @if ($breakPoint) {
      $coeff: math.div($breakPoint, 100);
      $vw1: calc(round(math.div($maxValue1, $coeff) * 1000) / 1000) + vw;
      $vw2: '';

      // check negative/positive value
      @each $name, $char in str($firstValues) {
        @if (str-index($name, '-')) {
          // for negative clamp()
          #{$property}-top: clamp(#{$max1}, #{$vw1}, #{$min1});
          #{$property}-bottom: clamp(#{$max1}, #{$vw1}, #{$min1});
          #{$property}-left: auto;
          #{$property}-right: auto;
        } @else {
          // for positive clamp()
          #{$property}-top: clamp(#{$min1}, #{$vw1}, #{$max1});
          #{$property}-bottom: clamp(#{$min1}, #{$vw1}, #{$max1});
          #{$property}-left: auto;
          #{$property}-right: auto;
        }
      }
    } @else {
      $coeff: math.div($projectWidth, 100);
      $vw1: calc(round(math.div($max1, $coeff) * 1000) / 1000) + vw;
      $vw2: '';

      // check negative/positive value
      @each $name, $char in str($firstValues) {
        @if (str-index($name, '-')) {
          // for negative clamp()
          #{$property}-top: clamp(#{$max1}, #{$vw1}, #{$min1});
          #{$property}-bottom: clamp(#{$max1}, #{$vw1}, #{$min1});
          #{$property}-left: auto;
          #{$property}-right: auto;
        } @else {
          // for positive clamp()
          #{$property}-top: clamp(#{$min1}, #{$vw1}, #{$max1});
          #{$property}-bottom: clamp(#{$min1}, #{$vw1}, #{$max1});
          #{$property}-left: auto;
          #{$property}-right: auto;
        }
      }
    }
  } @else if ($min1 != 'auto' and $max1 != 'auto' and $min2 != 'auto' and $max2 != 'auto') {
    @if ($breakPoint) {
      $coeff: math.div($breakPoint, 100);
      $vw1: calc(round(math.div($maxValue1, $coeff) * 1000) / 1000) + vw;
      $vw2: calc(round(math.div($maxValue2, $coeff) * 1000) / 1000) + vw;

      // check negative/positive value
      @each $name, $char in str($firstValues) and str($secondValues) {
        @if (str-index($name, '-')) {
          // for negative clamp()
          #{$property}-top: clamp(#{$max1}, #{$vw1}, #{$min1});
          #{$property}-bottom: clamp(#{$max1}, #{$vw1}, #{$min1});
          #{$property}-left: clamp(#{$max2}, #{$vw2}, #{$min2});
          #{$property}-right: clamp(#{$max2}, #{$vw2}, #{$min2});
        } @else {
          // for positive clamp()
          #{$property}-top: clamp(#{$min1}, #{$vw1}, #{$max1});
          #{$property}-bottom: clamp(#{$min1}, #{$vw1}, #{$max1});
          #{$property}-left: clamp(#{$min2}, #{$vw2}, #{$max2});
          #{$property}-right: clamp(#{$min2}, #{$vw2}, #{$max2});
        }
      }
    } @else {
      $coeff: math.div($projectWidth, 100);
      $vw1: calc(round(math.div($max1, $coeff) * 1000) / 1000) + vw;
      $vw2: calc(round(math.div($max2, $coeff) * 1000) / 1000) + vw;

      // check negative/positive value
      @each $name, $char in str($firstValues) and str($secondValues) {
        @if (str-index($name, '-')) {
          // for negative clamp()
          #{$property}-top: clamp(#{$max1}, #{$vw1}, #{$min1});
          #{$property}-bottom: clamp(#{$max1}, #{$vw1}, #{$min1});
          #{$property}-left: clamp(#{$max2}, #{$vw2}, #{$min2});
          #{$property}-right: clamp(#{$max2}, #{$vw2}, #{$min2});
        } @else {
          // for positive clamp()
          #{$property}-top: clamp(#{$min1}, #{$vw1}, #{$max1});
          #{$property}-bottom: clamp(#{$min1}, #{$vw1}, #{$max1});
          #{$property}-left: clamp(#{$min2}, #{$vw2}, #{$max2});
          #{$property}-right: clamp(#{$min2}, #{$vw2}, #{$max2});
        }
      }
    }
  } @else {
    @if ($breakPoint) {
      $coeff: math.div($breakPoint, 100);
      #{$property}-top: auto;
      #{$property}-bottom: auto;
      #{$property}-left: auto;
      #{$property}-right: auto;
    } @else {
      #{$property}-top: auto;
      #{$property}-bottom: auto;
      #{$property}-left: auto;
      #{$property}-right: auto;
    }
  }
}
